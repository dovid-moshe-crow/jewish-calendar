{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "jewish-datepicker",
  "type": "registry:component",
  "title": "Jewish Date Picker",
  "description": "Date picker version with selection and the same options as the calendar.",
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/jewish-datepicker/jewish-datepicker.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/new-york/ui/card\"\r\nimport { Input } from \"@/registry/new-york/ui/input\"\r\nimport { Label } from \"@/registry/new-york/ui/label\"\r\nimport {\r\n  Calendar as CalendarIcon,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n  Languages,\r\n} from \"lucide-react\"\r\nimport {\r\n  toJewishDate,\r\n  toHebrewJewishDate,\r\n  formatJewishDate,\r\n  formatJewishDateInHebrew,\r\n} from \"jewish-date\"\r\n\r\ntype Language = \"en\" | \"he\"\r\n\r\nexport type JewishDatePickerProps = {\r\n  value?: Date\r\n  onChange?: (date: Date) => void\r\n  language?: Language\r\n  startOfWeek?: 0 | 1\r\n  showOutsideDays?: boolean\r\n}\r\n\r\nfunction addDays(date: Date, days: number) {\r\n  const d = new Date(date)\r\n  d.setDate(d.getDate() + days)\r\n  return d\r\n}\r\n\r\nexport function JewishDatePicker({\r\n  value,\r\n  onChange,\r\n  language: controlledLanguage,\r\n  startOfWeek = 0,\r\n  showOutsideDays = true,\r\n}: JewishDatePickerProps) {\r\n  const [selected, setSelected] = React.useState<Date | undefined>(value)\r\n  const [displayDate, setDisplayDate] = React.useState<Date>(() => selected ?? new Date())\r\n  const [uncontrolledLanguage, setUncontrolledLanguage] = React.useState<Language>(\"en\")\r\n  const language = controlledLanguage ?? uncontrolledLanguage\r\n\r\n  React.useEffect(() => {\r\n    if (value) {\r\n      setSelected(value)\r\n      setDisplayDate(value)\r\n    }\r\n  }, [value])\r\n\r\n  const firstOfMonth = React.useMemo(\r\n    () => new Date(displayDate.getFullYear(), displayDate.getMonth(), 1),\r\n    [displayDate]\r\n  )\r\n  const lastOfMonth = React.useMemo(\r\n    () => new Date(displayDate.getFullYear(), displayDate.getMonth() + 1, 0),\r\n    [displayDate]\r\n  )\r\n  const gridStart = React.useMemo(() => {\r\n    const weekday = firstOfMonth.getDay()\r\n    const offset = (weekday - startOfWeek + 7) % 7\r\n    return addDays(firstOfMonth, -offset)\r\n  }, [firstOfMonth, startOfWeek])\r\n  const gridEnd = React.useMemo(() => {\r\n    const weekday = lastOfMonth.getDay()\r\n    const offset = 6 - ((weekday - startOfWeek + 7) % 7)\r\n    return addDays(lastOfMonth, offset)\r\n  }, [lastOfMonth, startOfWeek])\r\n\r\n  const days: Date[] = []\r\n  for (let d = new Date(gridStart); d <= gridEnd; d = addDays(d, 1)) {\r\n    days.push(new Date(d))\r\n  }\r\n\r\n  const jew = toJewishDate(displayDate)\r\n  const jewHe = toHebrewJewishDate(jew)\r\n\r\n  const headerEn = new Intl.DateTimeFormat(\"en-US\", {\r\n    month: \"long\",\r\n    year: \"numeric\",\r\n  }).format(firstOfMonth)\r\n  const headerHe = `${jewHe.monthName} ${jewHe.year}`\r\n\r\n  const dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n  const dayNamesHe = [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"]\r\n  const headers = language === \"en\" ? dayNamesEn : dayNamesHe\r\n  const rotatedHeaders = [\r\n    ...headers.slice(startOfWeek),\r\n    ...headers.slice(0, startOfWeek),\r\n  ]\r\n\r\n  function select(date: Date) {\r\n    setSelected(date)\r\n    onChange?.(date)\r\n  }\r\n\r\n  const [open, setOpen] = React.useState(false)\r\n  const inputLabel = selected\r\n    ? new Intl.DateTimeFormat(\"en-CA\").format(selected)\r\n    : \"Select date\"\r\n\r\n  return (\r\n    <div className=\"w-full max-w-sm\">\r\n      <Label htmlFor=\"jdate\" className=\"sr-only\">\r\n        Date\r\n      </Label>\r\n      <button\r\n        id=\"jdate\"\r\n        className=\"w-full inline-flex items-center justify-between border rounded-md h-9 px-3 text-sm bg-background\"\r\n        onClick={() => setOpen((o) => !o)}\r\n        aria-haspopup=\"dialog\"\r\n        aria-expanded={open}\r\n      >\r\n        <span className=\"truncate\">\r\n          {language === \"en\"\r\n            ? selected\r\n              ? `${inputLabel} • ${formatJewishDate(toJewishDate(selected))}`\r\n              : \"Select date\"\r\n            : selected\r\n            ? formatJewishDateInHebrew(toJewishDate(selected))\r\n            : \"בחר תאריך\"}\r\n        </span>\r\n        <CalendarIcon className=\"size-4 opacity-70\" />\r\n      </button>\r\n\r\n      {open ? (\r\n        <div\r\n          role=\"dialog\"\r\n          aria-modal=\"true\"\r\n          className=\"mt-2 border rounded-md shadow-md bg-background\"\r\n        >\r\n          <div className=\"flex items-center justify-between p-2\">\r\n            <div className=\"text-sm font-medium\">\r\n              {language === \"en\" ? headerEn : headerHe}\r\n            </div>\r\n            <div className=\"flex items-center gap-1\">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                aria-label=\"Previous year\"\r\n                onClick={() =>\r\n                  setDisplayDate((d) => new Date(d.getFullYear() - 1, d.getMonth(), 1))\r\n                }\r\n              >\r\n                <ChevronsLeft className=\"size-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"icon\"\r\n                onClick={() => setDisplayDate((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))}\r\n                aria-label=\"Prev\"\r\n              >\r\n                <ChevronLeft className=\"size-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"icon\"\r\n                onClick={() => setDisplayDate((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))}\r\n                aria-label=\"Next\"\r\n              >\r\n                <ChevronRight className=\"size-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                aria-label=\"Next year\"\r\n                onClick={() =>\r\n                  setDisplayDate((d) => new Date(d.getFullYear() + 1, d.getMonth(), 1))\r\n                }\r\n              >\r\n                <ChevronsRight className=\"size-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                aria-label=\"Toggle language\"\r\n                onClick={() => setUncontrolledLanguage(language === \"en\" ? \"he\" : \"en\")}\r\n                title={language === \"en\" ? \"עברית\" : \"English\"}\r\n              >\r\n                <Languages className=\"size-4\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <div className=\"grid grid-cols-7 gap-1 text-center text-[11px] text-muted-foreground mb-1\">\r\n              {rotatedHeaders.map((d) => (\r\n                <div key={d}>{d}</div>\r\n              ))}\r\n            </div>\r\n            <div className=\"grid grid-cols-7 gap-1\">\r\n              {days.map((date) => {\r\n                const isCurrentMonth = date.getMonth() === displayDate.getMonth()\r\n                if (!isCurrentMonth && !showOutsideDays) {\r\n                  return <div key={date.toISOString()} className=\"min-h-9\" />\r\n                }\r\n                const jewD = toJewishDate(date)\r\n                const jewHeD = toHebrewJewishDate(jewD)\r\n                const isSelected = selected && date.toDateString() === selected.toDateString()\r\n                const isToday = new Date().toDateString() === date.toDateString()\r\n                return (\r\n                  <button\r\n                    key={date.toISOString()}\r\n                    className={[\r\n                      \"text-left border rounded-md px-2 py-1 text-xs min-h-9\",\r\n                      isCurrentMonth ? \"bg-background\" : \"bg-muted/20 text-muted-foreground\",\r\n                      isSelected ? \"ring-2 ring-primary\" : \"\",\r\n                      isToday ? \"ring-2 ring-ring\" : \"\",\r\n                    ].join(\" \")}\r\n                    onClick={() => {\r\n                      select(date)\r\n                      setOpen(false)\r\n                    }}\r\n                  >\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"font-medium\">{date.getDate()}</span>\r\n                      <span className=\"text-[10px]\">\r\n                        {language === \"en\" ? jewD.day : jewHeD.day}\r\n                      </span>\r\n                    </div>\r\n                  </button>\r\n                )\r\n              })}\r\n            </div>\r\n            <div className=\"flex items-center justify-between mt-2\">\r\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setDisplayDate(new Date())}>\r\n                Today\r\n              </Button>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={() => selected && setDisplayDate(selected)}\r\n                disabled={!selected}\r\n              >\r\n                Go to Selected\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JewishDatePicker\r\n\r\n\r\n",
      "type": "registry:component"
    }
  ]
}