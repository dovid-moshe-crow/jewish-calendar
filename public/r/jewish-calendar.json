{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "jewish-calendar",
  "type": "registry:component",
  "title": "Jewish Calendar",
  "description": "A Gregorian/Hebrew calendar with language toggle powered by jewish-date.",
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/jewish-calendar/jewish-calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  toJewishDate,\r\n  toHebrewJewishDate,\r\n  formatJewishDate,\r\n  formatJewishDateInHebrew,\r\n} from \"jewish-date\"\r\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n  CardContent,\r\n} from \"@/registry/new-york/ui/card\"\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n  Languages,\r\n} from \"lucide-react\"\r\n\r\ntype Language = \"en\" | \"he\"\r\n\r\nexport type JewishCalendarProps = {\r\n  language?: Language\r\n  onLanguageChange?: (language: Language) => void\r\n  startOfWeek?: 0 | 1\r\n  showOutsideDays?: boolean\r\n}\r\n\r\nfunction addDays(date: Date, days: number) {\r\n  const d = new Date(date)\r\n  d.setDate(d.getDate() + days)\r\n  return d\r\n}\r\n\r\nexport function JewishCalendar({\r\n  language: controlledLanguage,\r\n  onLanguageChange,\r\n  startOfWeek = 0,\r\n  showOutsideDays = true,\r\n}: JewishCalendarProps) {\r\n  const [displayDate, setDisplayDate] = React.useState(() => new Date())\r\n  const [uncontrolledLanguage, setUncontrolledLanguage] = React.useState<Language>(\r\n    \"en\"\r\n  )\r\n  const language = controlledLanguage ?? uncontrolledLanguage\r\n  const setLanguage = (lang: Language) => {\r\n    setUncontrolledLanguage(lang)\r\n    onLanguageChange?.(lang)\r\n  }\r\n\r\n  const firstOfMonth = React.useMemo(\r\n    () => new Date(displayDate.getFullYear(), displayDate.getMonth(), 1),\r\n    [displayDate]\r\n  )\r\n\r\n  const lastOfMonth = React.useMemo(\r\n    () => new Date(displayDate.getFullYear(), displayDate.getMonth() + 1, 0),\r\n    [displayDate]\r\n  )\r\n\r\n  const gridStart = React.useMemo(() => {\r\n    const weekday = firstOfMonth.getDay() // 0..6 (Sun..Sat)\r\n    const offset = (weekday - startOfWeek + 7) % 7\r\n    return addDays(firstOfMonth, -offset)\r\n  }, [firstOfMonth, startOfWeek])\r\n\r\n  const gridEnd = React.useMemo(() => {\r\n    const weekday = lastOfMonth.getDay() // 0..6 (Sun..Sat)\r\n    const offset = (6 - ((weekday - startOfWeek + 7) % 7))\r\n    return addDays(lastOfMonth, offset)\r\n  }, [lastOfMonth, startOfWeek])\r\n\r\n  const days: Date[] = []\r\n  for (let d = new Date(gridStart); d <= gridEnd; d = addDays(d, 1)) {\r\n    days.push(new Date(d))\r\n  }\r\n\r\n  const today = React.useMemo(() => new Date(), [])\r\n  const isSameDay = (a: Date, b: Date) =>\r\n    a.getFullYear() === b.getFullYear() &&\r\n    a.getMonth() === b.getMonth() &&\r\n    a.getDate() === b.getDate()\r\n\r\n  const midMonth = new Date(displayDate.getFullYear(), displayDate.getMonth(), 15)\r\n  const midJewish = toJewishDate(midMonth)\r\n  const headerHe = toHebrewJewishDate(midJewish)\r\n\r\n  const headerEnGregorian = new Intl.DateTimeFormat(\"en-US\", {\r\n    month: \"long\",\r\n    year: \"numeric\",\r\n  }).format(firstOfMonth)\r\n\r\n  const headerHeJewish = `${headerHe.monthName} ${headerHe.year}`\r\n\r\n  const dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n  const dayNamesHe = [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"]\r\n  const headers = language === \"en\" ? dayNamesEn : dayNamesHe\r\n  const rotatedHeaders = [\r\n    ...headers.slice(startOfWeek),\r\n    ...headers.slice(0, startOfWeek),\r\n  ]\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader className=\"flex flex-row items-center justify-between gap-4\">\r\n        <div className=\"flex flex-col\">\r\n          <CardTitle>\r\n            {language === \"en\" ? headerEnGregorian : headerHeJewish}\r\n          </CardTitle>\r\n          <CardDescription>\r\n            {language === \"en\"\r\n              ? formatJewishDate(midJewish)\r\n              : formatJewishDateInHebrew(midJewish)}\r\n          </CardDescription>\r\n        </div>\r\n        <div className=\"flex items-center gap-1\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            aria-label=\"Previous year\"\r\n            onClick={() =>\r\n              setDisplayDate((d) => new Date(d.getFullYear() - 1, d.getMonth(), 1))\r\n            }\r\n          >\r\n            <ChevronsLeft className=\"size-4\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            aria-label=\"Previous month\"\r\n            onClick={() =>\r\n              setDisplayDate((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))\r\n            }\r\n          >\r\n            <ChevronLeft className=\"size-4\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            aria-label=\"Next month\"\r\n            onClick={() =>\r\n              setDisplayDate((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))\r\n            }\r\n          >\r\n            <ChevronRight className=\"size-4\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            aria-label=\"Next year\"\r\n            onClick={() =>\r\n              setDisplayDate((d) => new Date(d.getFullYear() + 1, d.getMonth(), 1))\r\n            }\r\n          >\r\n            <ChevronsRight className=\"size-4\" />\r\n          </Button>\r\n          <div className=\"w-px h-6 bg-border mx-1\" />\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            aria-label=\"Toggle language\"\r\n            onClick={() => setLanguage(language === \"en\" ? \"he\" : \"en\")}\r\n            title={language === \"en\" ? \"עברית\" : \"English\"}\r\n          >\r\n            <Languages className=\"size-4\" />\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid grid-cols-7 gap-2 text-center text-xs text-muted-foreground mb-2\">\r\n          {rotatedHeaders.map((d) => (\r\n            <div key={d}>{d}</div>\r\n          ))}\r\n        </div>\r\n        <div className=\"grid grid-cols-7 gap-2\">\r\n          {days.map((date) => {\r\n            const isCurrentMonth = date.getMonth() === displayDate.getMonth()\r\n            const jewish = toJewishDate(date)\r\n            const heb = toHebrewJewishDate(jewish)\r\n            const gregDay = date.getDate()\r\n            const jewishDayEn = jewish.day\r\n            const jewishDayHe = heb.day\r\n            const isToday = isSameDay(date, today)\r\n\r\n            if (!isCurrentMonth && !showOutsideDays) {\r\n              return <div key={date.toISOString()} className=\"min-h-20\" />\r\n            }\r\n\r\n            return (\r\n              <div\r\n                key={date.toISOString()}\r\n                className={[\r\n                  \"border rounded-md p-2 text-sm flex flex-col items-start gap-1 min-h-20\",\r\n                  isCurrentMonth ? \"bg-background\" : \"bg-muted/20 text-muted-foreground\",\r\n                  isToday ? \"ring-2 ring-ring\" : \"\",\r\n                ].join(\" \")}\r\n              >\r\n                <div className=\"flex items-center justify-between w-full\">\r\n                  <span className=\"font-medium\">{gregDay}</span>\r\n                  <span className=\"text-xs\">\r\n                    {language === \"en\" ? jewishDayEn : jewishDayHe}\r\n                  </span>\r\n                </div>\r\n                <div className=\"text-[10px] opacity-70\">\r\n                  {language === \"en\" ? jewish.monthName : heb.monthName}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default JewishCalendar\r\n\r\n\r\n",
      "type": "registry:component"
    }
  ]
}